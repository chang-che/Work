}
for (i in 1:10){
print(sample(1:100, 10))
print(i)}
listofsam = list()
for (i in 1:10){
listofsam[[i]] = sample(1:100, 10)}
listofsam
?rep
x = c()
x[1] = 1
x[2] = 2
x
?sample
for (i in 1:10){
testIndexes <- sample(1:100, 10))
print(testIndexes)
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x = c()
x[1] = 1
x[3] = 2
x
x = list()
x[['pcl']] = 1
x
x
x = letters[1:3]
x
x[]
paste(x)
paste0(x)
?intersect
?unlist
paste(x, collapse = '')
paste('abc',x, collapse = '')
paste('abc', x, collapse = '')
paste('1234', x, collapse = '')
x
?unlist
x = list()
x
unlist(x)
x
?c
c(list(A = c(B = 1)), recursive = TRUE)
x = c(list(A = c(B = 1)), recursive = TRUE)
x
name(x)
names(x)
x = c(list(A = c(B = 1, C = 2), B = c(E = 7)), recursive = TRUE)
x
names(x)
x = c(list(A = c(B = 1, C = 2), B = c(E = 7)))
x
rm(list = ls())
x = data.frame(a = rpois(10,2), b = rpois(10, 4))
xtabs(x)
x
?xtabs
DF <- as.data.frame(UCBAdmissions)
xtabs(Freq ~ Gender + Admit, DF)
View(DF)
summary(xtabs(Freq ~ ., DF))
?vector
l <- vector('list', 10)
l
l[[11]] = c(1,1)
l
x = list(1,2)
y = list(3,4)
cbind(x,y)
x = list(c(1,2), c(3,4))
y = list(c(3,4), c(4,5))
cbind(x,y)
a = cbind(x,y)
a$x
a[[x]]
a$x
x = list(1,2) y = list(3,4) cbind(x,y)
x = list(1,2)
y = list(3,4)
b = cbind(x,y)
b$x
b
class(b)
b = as.data.frame(b)
b
b$x
a = as.data.frame(a)
a$x
a = list(c('a', 'b'), c(1, 2))
b = list(letters[1:4], c(1,2,3,4))
df = cbind(a,b)
df$a
df
class(df)
df <- as.data.frame(df)
df
df$a
df[[a]]
df[['a']]
x = rnorm(3000)
chi = matrix(x, nrow = 1000)
v = apply(chi,1, sum)
qqplot(rchisq(1000), v)
qqplot(rchisq(1000, 1), v)
x = rnorm(3000)
x = rnorm(3000)^2
chi = matrix(x, nrow = 1000)
v = apply(chi,1, sum)
v = apply(chi,3, sum)
v = apply(chi,1, sum)
qqplot(rchisq(1000, 3), v)
?abline
abline(0, 1, col = 'red')
dm = matrix(rnorm(4000)^2, ncol = 4)
dm = dm^2
v = apply(dm, 1, sum)
qqplot
qqplot(rchisq(1000, 4), v)
x = rnorm(4000)
chi = matrix(x^2, ncol = 4)
dim(chi)
v = apply(chi, 1, sum)
dim(v)
length(v)
qqplot
qqplot(rchiq(1000, 4), v)
qqplot(rchisq(1000, 4), v)
install.packages("igraph")
install.packages(c("BH", "BsMD", "callr", "DBI", "dbplyr", "devtools", "digest", "DoE.base", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "PerformanceAnalytics", "pillar", "quantreg", "RcppArmadillo", "RcppEigen", "rlang", "rmarkdown", "rpart", "selectr", "sfsmisc", "stringr", "tidyquant", "tidyr", "tidyselect", "timeDate", "tseries", "viridisLite", "XML", "yaml"))
return(remMap.CV(X.m1[trainID,], Y.m1[trainID,], lamL1.v, lamL2.v, C.m=NULL, fold=4, seed=1000))
library(remMap)
load(file = '/Users/changche/My/Study/Work/clinical533_02_17_2018.RData')  ## load clinical data
load(file="/Users/changche/My/Study/Work/ExonCountsNormalize533.RData")   ## load normalized exoncounts
load(file = '/Users/changche/My/Study/Work/exon330_genefilter.RData')
load(file ='/Users/changche/My/Study/Work/train_test_ID_12_14_2017.RData')
####################################################################################
# trying remMap on "PCL", "PHQ9", "LRS_total"
listofn = c("PCL", "PHQ9", "LRS_total")
exon.norm.log = log2(exoncounts_normalized+1)  ## log transform normalized exoncounts
exon.norm.log = exon.norm.log[keep,]
exon.norm.log = t(exon.norm.log)
# delete the missing value and standardize both the response and predictor.
ind = which(clinical$batch==3 & clinical$Gender==0 & !is.na(clinical$PCL) & !is.na(clinical$PHQ9) & !is.na(clinical$LRS_total))
exon.norm.log_1st = exon.norm.log[ind,]
X.m1 = scale(exon.norm.log_1st)
Y.m1 = cbind(clinical$PCL, clinical$PHQ9, clinical$LRS_total)
colnames(Y.m1) = listofn
Y.m1 = Y.m1[ind,]
Y.m1 = scale(Y.m1)
nloop = 10
listofplot_remMap = list()
listofplot_Elastic = list()
listofbeta_remMap = list()
listofbeta_Elastic = list()
test_list <- list()
listoflambdas3 = list()
for (l in 1:nloop){
test_list[[l]] = sample(nrow(X.m1), floor(nrow(X.m1)*0.3))
}
lamL1.v = exp(seq(log(10),log(50), length=10))
lamL2.v = seq(0,40, length=10)
remMapCV <- function(trainID){
return(remMap.CV(X.m1[trainID,], Y.m1[trainID,], lamL1.v, lamL2.v, C.m=NULL, fold=4, seed=1000))
}
list_10_4 = mclapply(test_list, remMapCV, mc.cores = 8)
library(parallel)
list_10_4 = mclapply(test_list, remMapCV, mc.cores = 8)
length(list_10_4)
list_4 <- list_10_4[[1]]
pick=which.min(as.vector(list_4$ols.cv))
pick
list_4$l.index
as.vector(list_4$ols.cv)
list_4$ols.cv
remMapCV <- function(trainID){
cv.list = remMap.CV(X.m1[trainID,], Y.m1[trainID,], lamL1.v, lamL2.v, C.m=NULL, fold=5, seed=1000)
pick=which.min(as.vector(cv.list$ols.cv))
lamL1.pick=cv.list$l.index[1,pick]  ##find the optimal (LamL1,LamL2) based on the cv score
lamL2.pick=cv.list$l.index[2,pick]
rm(cv.list)
return(list(lamL1.pick, lamL2.pick))
}
list_10_2lambda = mclapply(test_list, remMapCV, mc.cores = 12)
lamL1.pick= list_10_2lambda[[1]][[1]]
list_10_2lambda[[1]][[1]]
lamL2.pick= list_10_2lambda[[i]][[2]]
lamL2.pick= list_10_2lambda[[1]][[2]]
result_1 = remMap(X.trainData, Y.trainData,lamL1=lamL1.pick, lamL2=lamL2.pick, phi0=NULL, C.m=NULL)
testIndexes <- test_list[[i]]
X.testData <- X.m1[testIndexes, ]
Y.testData <- Y.m1[testIndexes, ]
X.trainData <- X.m1[-testIndexes, ]
Y.trainData <- Y.m1[-testIndexes, ]
for (l in 1:nloop){
test_list[[l]] = sample(nrow(X.m1), floor(nrow(X.m1)*0.3))
}
testIndexes <- test_list[[1]]
X.testData <- X.m1[testIndexes, ]
Y.testData <- Y.m1[testIndexes, ]
X.trainData <- X.m1[-testIndexes, ]
Y.trainData <- Y.m1[-testIndexes, ]
result_1 = remMap(X.trainData, Y.trainData,lamL1=lamL1.pick, lamL2=lamL2.pick, phi0=NULL, C.m=NULL)
log(3)
log(40)
log(2)
lamL2.v = seq(0,40, length=40)
lamL2.v = seq(0,40, length=41)
cv.glmnet
library(glmnet)
?cv.glmnet
install.packages("devtools")
library(devtools)
install_github("hong-revo/glmnetUtils")
library(glmnetUtils)
?cva.glmnet
x = list(x = list(1,2), y = list(2,3))
x = list(a = list(1,2), y = list(2,3))
x[[a]]
x[['a']]
?glmnet
library(glmnet)
?glment
?glmnet
?cv.glmnet
alpha = c(0,  .1,  .2, .4, .6, .8, 1)
lambda = seq(.01, 1, length = 20))
lambda1 = lambda*alpha
lambda = seq(.01, 1, length = 20)
lambda1 = lambda*alpha
lambda1
?combin
?combn
alpha = c(0,  .1,  .2, .4, .6, .8, 1)
lambda = seq(.01, 1, length = 20)
lambda1 = lambda*alpha
lambda1 = lambda*alpha[1]
for (i in 1:7){
temp<- alpha[i]*lambda
lambda1 = c(lambda1,temp)
}
lambda1
lambda
lambda1 = lambda*alpha[1]
for (i in 2:7){
temp<- alpha[i]*lambda
lambda1 = c(lambda1,temp)
}
lambda1
lambda2 = lambda*(1-alpha[1])
for (i in 2:7){
temp<- (1-alpha[i])*lambda
lambda2 = c(lambda2,temp)
}
lambda2
exp(seq(log(0.1),log(40), length=40))
load(file = '/Users/changche/My/Study/Work/clinical533_02_17_2018.RData')  ## load clinical data
load(file="/Users/changche/My/Study/Work/ExonCountsNormalize533.RData")   ## load normalized exoncounts
load(file = '/Users/changche/My/Study/Work/exon330_genefilter.RData')
load(file ='/Users/changche/My/Study/Work/train_test_ID_12_14_2017.RData')
####################################################################################
####################################################################################
# trying remMap on "PCL", "PHQ9", "LRS_total"
listofn = c("PCL", "PHQ9", "LRS_total")
exon.norm.log = log2(exoncounts_normalized+1)  ## log transform normalized exoncounts
exon.norm.log = exon.norm.log[keep,]
exon.norm.log = t(exon.norm.log)
# delete the missing value and standardize both the response and predictor.
ind1 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(clinical$PCL) & !is.na(clinical$PHQ9) & !is.na(clinical$LRS_total))
ind2 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(apply(clinical[,listofn], 1, sum)))
exon.norm.log_1st = exon.norm.log[ind,]
X.m1 = scale(exon.norm.log_1st)
Y.m1 = cbind(clinical$PCL, clinical$PHQ9, clinical$LRS_total)
colnames(Y.m1) = listofn
Y.m1 = Y.m1[ind,]
Y.m1 = scale(Y.m1)
identical(ind1, ind2)
ind2 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(apply(clinical[listofn], 1, sum)))
# delete the missing value and standardize both the response and predictor.
ind1 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(clinical$PCL) & !is.na(clinical$PHQ9) & !is.na(clinical$LRS_total))
identical(ind1, ind2)
ind1 == ind2
?identical
ind1
ind2
ind2 = sort(which(clinical$batch==3 & clinical$Gender==0 & !is.na(apply(clinical[listofn], 1, sum))))
identical(ind1, ind2)
options
options()
options(digits = 5)
pi
e
log(1)
log(12)
options(digits = 4)
log(123132)
NULL <- options()
getOption('width')
# delete the missing value and standardize both the response and predictor.
ind1 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(clinical$PCL) & !is.na(clinical$PHQ9) & !is.na(clinical$LRS_total))
ind2 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(apply(clinical[listofn], 1, sum)))
length(ind1)
length(ind2)
identical(sort(ind1), sort(ind2))
class(ind1)
class(ind2)
ind2[!(ind2 %in% ind1)]
ind1[!(ind1 %in% ind2)]
names(ind1)
names(ind2)
names(ind2) = NULL
identical(sort(ind1), sort(ind2))
# delete the missing value and standardize both the response and predictor.
ind1 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(clinical$PCL) & !is.na(clinical$PHQ9) & !is.na(clinical$LRS_total))
ind2 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(apply(clinical[listofn], 1, sum)))
exon.norm.log_1st = exon.norm.log[ind1,]
exon.norm.log_2 = exon.norm.log[ind2,]
identical(exon.norm.log_1st, exon.norm.log_2)
Y.m2 = clinical[listofn]
identical
identical(Y.m1, Y.m2)
Y.m2 = clinical[[listofn]]
Y.m2 = clinical[,listofn]
identical(Y.m1, Y.m2)
Y.m2 = as.matrix(Y.m2)
identical(Y.m1, Y.m2)
Y.m1 = cbind(clinical$PCL, clinical$PHQ9, clinical$LRS_total)
identical(Y.m1, Y.m2)
View(Y.m1)
View(Y.m2)
View(Y.m2)
Y.m1 = cbind(clinical$PCL, clinical$PHQ9, clinical$LRS_total)
colnames(Y.m1) = listofn
identical(Y.m1, Y.m2)
View(Y.m1)
View(Y.m2)
rownames(Y.m2) = 1:length(rownames(Y.m2))
identical(Y.m1, Y.m2)
View(Y.m2)
View(Y.m1)
table
table(Y.m1 = Y.,2)
table(Y.m1 = Y.m2)
table(Y.m1 == Y.m2)
table(is.na(Y.m1))
x = 'exp(seq(log(0.1),log(40), length=40))'
get(x)
eval(x)
?eval
eval(parse(x))
eval(parse(text = x))
?parse
hist(rpois(100))
hist(rpois(100, lambda = 10))
hist(rpois(100, lambda = 100))
hist(rpois(1000, lambda = 100))
hist(rpois(5000, lambda = 100))
hist(log(rpois(5000, lambda = 10)))
hist(log(rpois(5000, lambda = 100)))
rm(list = ls())
?ggpubr
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
?ggpubr
load(file = '/Users/changche/My/Study/Work/clinical533_02_17_2018.RData')  ## load clinical data
load(file="/Users/changche/My/Study/Work/ExonCountsNormalize533.RData")   ## load normalized exoncounts
load(file = '/Users/changche/My/Study/Work/exon330_genefilter.RData')
load(file ='/Users/changche/My/Study/Work/train_test_ID_12_14_2017.RData')
rm(c('exoncounts_normalized','clinical'))
rm(list = c('exoncounts_normalized','clinical'))
?cv.glmnet
library(glmnet)
?cv.glmnet
library(parallel)
detectCores(logical = FALSE)
library(parallel)
?parallel
install.packages('edgeR')
source("https://bioconductor.org/biocLite.R")
biocLite("edgeR")
library(edgeR)
?rpkm
d1 <- read.table('/Users/changche/My/Study/Work/Expression_normalized_ridge.txt', header = T)
dim(d1)
rm(list =)
rm(list = ls())
source('~/My/Study/Work/April_5th_MDD.R', echo=TRUE)
library(edgeR)
?rpkm
library(edgeR)
?rpkm
?order
?sort
?rpkm
?save
?excle
??excel
x = read.csv('/Users/changche/Downloads/xcell.csv', header = T)
source('~/My/Study/Work/April_5th_MDD.R', echo=TRUE)
xcell = read.table('/Users/changche/Downloads/xCell_xcell_xCell_1852040918_RAW.txt', header = T)
xcell = read.table('/Users/changche/Downloads/xCell_xcell_xCell_1852040918_RAW.txt', header = T, sep = '\t')
View(xcell)
dim(xcell)
xcell$X
xcell2 <- read.table('/Users/changche/Downloads/xCell_xcell_xCell_1852040918.txt', header = T, sep ='\t')
View(xcell2)
xcell2$X
dim(xcell2)
library(deseq)
library(deseq2)
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DEseq2)
library(DESeq2)
?DESeqDataSetFromMatrix
?data.frame
?DESeqDataSetFromMatrix
?save
?DESeqDataSetFromMatrix
?DESeq
?glm
xcell <- read.table('/Users/changche/Downloads/xCell_xcell_xCell_1852040918.txt', header = T, sep ='\t')
View(xcell)
sum(xcell[39,] == 0)
sum(xcell[5,] == 0)
sum(xcell[3,] == 0)
sum(xcell[10,] == 0)
sum(xcell[39,] == 0)
?formula
library(DESeq2)
?DESeqDataSetFromMatrix
dim(xcell)
xcell[1:5,1:5]
source('~/.active-rstudio-document', echo=TRUE)
x <- paste(covariates, sep = '+', collapse = '')
x
covariates <- xcell[2]
x <- paste(covariates, sep = '+', collapse = '')
x
covariates <- xcell[1]
x <- paste(covariates, sep = '+', collapse = '')
x
x <- paste('~',covariates, sep = '+', collapse = '+')
x
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x
str(xcell)
covariates <- as.character(xcell[1])
str(xcell)
x <- paste(covariates ,collapse = '+')
x
class(covariates)
covariates <- as.character(xcell[,1])
str(xcell)
class(covariates)
x <- paste(covariates ,collapse = '+')
x
y =
y = as.formula(paste('~',x))
?float
?as.numeric
library(DESeq2)
?results
-c('a','b','c')
letters[1:5]-c('a','b','c')
1:5 -2:6
-2:6
-(2:6)
?union
#only choose the genes that has non-NA adjusted p-value
gene_union_corrected <- gene_union[!is.na(res330_df[gene_union,]$log2FoldChange)&!is.na(res922_df[gene_union,]$log2FoldChange)]
library(remMap)
?remMap.CV
source('~/My/Study/Work/Multiplot().R', echo=TRUE)
save(multiplot, file = '/Users/changche/My/Study/Work/multiplot.Rdata')
?melt
?data.table
?contour
install.packages("~/My/math/STAT/Courses/AMS 597/hmm_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(hmm)
detach("package:hmm", unload=TRUE)
remove.packages("hmm")
install.packages("~/My/math/STAT/Courses/hmm.tar.gz", repos = NULL, type = "source")
library(hmm)
?BaumWelch_hmm
??BaumWelch_hmm
?hmm_BIC
?hmm_BIC
help(hmm_BIC)
?BIC
detach("package:hmm", unload=TRUE)
remove.packages("hmm")
install.packages("~/My/math/STAT/Courses/hmm.tar.gz", repos = NULL, type = "source")
library("hmm", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
?BaumWelch_hmm
?BIC_hmm
detach("package:hmm", unload=TRUE)
remove.packages("hmm")
install.packages("~/My/math/STAT/Courses/hmm.tar.gz", repos = NULL, type = "source")
?counts
library(DESeq2)
?counts
library(pROC)
?auc
?scale
genes.inter = intersect(colnames(X.m3), colnames(M.Xtest)) # has already intersected
