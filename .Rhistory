color <- c('red', 'green', 'black')
color.nominal = factor(color.nominal)
color.nominal = factor(color)
color.nominal
relevel(color.nominal,'black')
ordered(color.nominal)
color.ordinal <- ordered(color.nominal)
relevel
relevel(color.ordinal, 'green')
color.ordinal <- ordered(color.ordinal, c('green', 'red', 'black'))
color.ordinal
color.ordinal <- ordered(color.ordinal, c('black'))
color.ordinal
color.ordinal <- ordered(color.nominal)
ordered(color.ordinal, c('black', 'red'))
ordered(color.ordinal, c('black', 'yellow'))
ordered(color.ordinal, c('black', 'yellow', 'green'))
df <- data.frame(group=c(rep("A", 4), rep("B", 4)),
a=sample(1:100, 8),
b=sample(100:200, 8),
c=sample(300:400, 8))
View(df)
?data.frame
L3 <- LETTERS[1:3]
fac <- sample(L3, 10, replace = TRUE)
(d <- data.frame(x = 1, y = 1:10, fac = fac))
remMap_beta = data.frame(PCL_H = 1:10, PCL_A = 1:10, PCL_R = 1:10, PCL_N = 1:10)
remMap_beta[1,1]
remMap_beta[1,1] = c('a','b')
remMap_beta[1,1] = list(c('a','b'))
remMap_beta[1,1] = list('a','b')
p1 = plot(1)
p2 = plot(2)
p3 = plot(3)
p4 = plot(4)
ls1 = list(p1,p2)
ls2 = list(p3,p4)
rbind(ls1, ls2)
?assign
for (e in 1:10){
assign(paste0('listofplot_', e), list())
assign(paste0('beta_', e), list())
}
?get
for (i in 1:10){
print(i)
}
View(listofplot_9)
get(paste0('listofplot_',1))[1] = plot(1)
get(paste0('listofplot_',1))
get(paste0('listofplot_',1)) = c(get(paste0('listofplot_',1)), plot(1))
get(paste0('listofplot_',1)) <-  c(get(paste0('listofplot_',1)), plot(1))
ls1
ls1[[1]] = plot(1)
ls1
ls1[[1]]
get(paste0('listofplot_',1)) = list(1)
get(paste0('listofplot_',1))
get(paste0('listofplot_',100)) = list(1)
listofplot_1 = list()
listofplot_1 = list(1,2,3)
get(paste0('listofplot_',100))
get(paste0('listofplot_',1))
get(paste0('listofplot_',1)) = list(1)
x = list(list(), list())
x[1]
x = list(list(1,2), list(3,4))
x[[1]]
x[[1]][1] = 'a'
x
x[[1]][1] = 1
for (i in 1:2){
a += x[[i]][1]
}
for (i in 1:2){
a = a+ x[[i]][1]
}
a = 0
for (i in 1:2){
a = a+ x[[i]][1]
}
x[[1]][1]
x[[1]][[1]]
for (i in 1:2){
a = a+ x[[i]][[1]]
}
a
listofcor = list()
for (e in 1:10){
listofcor = c(listofcor, list())
}
listofcor
x = list(c(1,2), c(3,4))
for (i in 1:2){
a = a+ x[[i]][1]
}
a
x = cor(c(1,1), c(1,2))
x
a = c(1,2)
x = list(a)
x
x[1]
x[[1]]
list(c(1,2))
x = list(c(1,2))
x[1]
x[[1]]
is.list(x[[1]])
is.vector(x[[1]])
x = list(list(1,2))
is.list(x[[1]])
?gl
gl(3, 3)
gl(3, 3, labels = c('small','medium', 'large'))
gl(3, 3, labels = c('small','medium', 'large'), ordered = T)
for (i in 1:10){
print(sample(1:100, 10))
}
for (i in 1:10){
print(sample(1:100, 10))
print(i)}
listofsam = list()
for (i in 1:10){
listofsam[[i]] = sample(1:100, 10)}
listofsam
?rep
x = c()
x[1] = 1
x[2] = 2
x
?sample
for (i in 1:10){
testIndexes <- sample(1:100, 10))
print(testIndexes)
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x = c()
x[1] = 1
x[3] = 2
x
x = list()
x[['pcl']] = 1
x
x
x = letters[1:3]
x
x[]
paste(x)
paste0(x)
?intersect
?unlist
paste(x, collapse = '')
paste('abc',x, collapse = '')
paste('abc', x, collapse = '')
paste('1234', x, collapse = '')
x
?unlist
x = list()
x
unlist(x)
x
?c
c(list(A = c(B = 1)), recursive = TRUE)
x = c(list(A = c(B = 1)), recursive = TRUE)
x
name(x)
names(x)
x = c(list(A = c(B = 1, C = 2), B = c(E = 7)), recursive = TRUE)
x
names(x)
x = c(list(A = c(B = 1, C = 2), B = c(E = 7)))
x
rm(list = ls())
x = data.frame(a = rpois(10,2), b = rpois(10, 4))
xtabs(x)
x
?xtabs
DF <- as.data.frame(UCBAdmissions)
xtabs(Freq ~ Gender + Admit, DF)
View(DF)
summary(xtabs(Freq ~ ., DF))
?vector
l <- vector('list', 10)
l
l[[11]] = c(1,1)
l
x = list(1,2)
y = list(3,4)
cbind(x,y)
x = list(c(1,2), c(3,4))
y = list(c(3,4), c(4,5))
cbind(x,y)
a = cbind(x,y)
a$x
a[[x]]
a$x
x = list(1,2) y = list(3,4) cbind(x,y)
x = list(1,2)
y = list(3,4)
b = cbind(x,y)
b$x
b
class(b)
b = as.data.frame(b)
b
b$x
a = as.data.frame(a)
a$x
a = list(c('a', 'b'), c(1, 2))
b = list(letters[1:4], c(1,2,3,4))
df = cbind(a,b)
df$a
df
class(df)
df <- as.data.frame(df)
df
df$a
df[[a]]
df[['a']]
x = rnorm(3000)
chi = matrix(x, nrow = 1000)
v = apply(chi,1, sum)
qqplot(rchisq(1000), v)
qqplot(rchisq(1000, 1), v)
x = rnorm(3000)
x = rnorm(3000)^2
chi = matrix(x, nrow = 1000)
v = apply(chi,1, sum)
v = apply(chi,3, sum)
v = apply(chi,1, sum)
qqplot(rchisq(1000, 3), v)
?abline
abline(0, 1, col = 'red')
dm = matrix(rnorm(4000)^2, ncol = 4)
dm = dm^2
v = apply(dm, 1, sum)
qqplot
qqplot(rchisq(1000, 4), v)
x = rnorm(4000)
chi = matrix(x^2, ncol = 4)
dim(chi)
v = apply(chi, 1, sum)
dim(v)
length(v)
qqplot
qqplot(rchiq(1000, 4), v)
qqplot(rchisq(1000, 4), v)
install.packages("igraph")
install.packages(c("BH", "BsMD", "callr", "DBI", "dbplyr", "devtools", "digest", "DoE.base", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "PerformanceAnalytics", "pillar", "quantreg", "RcppArmadillo", "RcppEigen", "rlang", "rmarkdown", "rpart", "selectr", "sfsmisc", "stringr", "tidyquant", "tidyr", "tidyselect", "timeDate", "tseries", "viridisLite", "XML", "yaml"))
return(remMap.CV(X.m1[trainID,], Y.m1[trainID,], lamL1.v, lamL2.v, C.m=NULL, fold=4, seed=1000))
library(remMap)
load(file = '/Users/changche/My/Study/Work/clinical533_02_17_2018.RData')  ## load clinical data
load(file="/Users/changche/My/Study/Work/ExonCountsNormalize533.RData")   ## load normalized exoncounts
load(file = '/Users/changche/My/Study/Work/exon330_genefilter.RData')
load(file ='/Users/changche/My/Study/Work/train_test_ID_12_14_2017.RData')
####################################################################################
# trying remMap on "PCL", "PHQ9", "LRS_total"
listofn = c("PCL", "PHQ9", "LRS_total")
exon.norm.log = log2(exoncounts_normalized+1)  ## log transform normalized exoncounts
exon.norm.log = exon.norm.log[keep,]
exon.norm.log = t(exon.norm.log)
# delete the missing value and standardize both the response and predictor.
ind = which(clinical$batch==3 & clinical$Gender==0 & !is.na(clinical$PCL) & !is.na(clinical$PHQ9) & !is.na(clinical$LRS_total))
exon.norm.log_1st = exon.norm.log[ind,]
X.m1 = scale(exon.norm.log_1st)
Y.m1 = cbind(clinical$PCL, clinical$PHQ9, clinical$LRS_total)
colnames(Y.m1) = listofn
Y.m1 = Y.m1[ind,]
Y.m1 = scale(Y.m1)
nloop = 10
listofplot_remMap = list()
listofplot_Elastic = list()
listofbeta_remMap = list()
listofbeta_Elastic = list()
test_list <- list()
listoflambdas3 = list()
for (l in 1:nloop){
test_list[[l]] = sample(nrow(X.m1), floor(nrow(X.m1)*0.3))
}
lamL1.v = exp(seq(log(10),log(50), length=10))
lamL2.v = seq(0,40, length=10)
remMapCV <- function(trainID){
return(remMap.CV(X.m1[trainID,], Y.m1[trainID,], lamL1.v, lamL2.v, C.m=NULL, fold=4, seed=1000))
}
list_10_4 = mclapply(test_list, remMapCV, mc.cores = 8)
library(parallel)
list_10_4 = mclapply(test_list, remMapCV, mc.cores = 8)
length(list_10_4)
list_4 <- list_10_4[[1]]
pick=which.min(as.vector(list_4$ols.cv))
pick
list_4$l.index
as.vector(list_4$ols.cv)
list_4$ols.cv
remMapCV <- function(trainID){
cv.list = remMap.CV(X.m1[trainID,], Y.m1[trainID,], lamL1.v, lamL2.v, C.m=NULL, fold=5, seed=1000)
pick=which.min(as.vector(cv.list$ols.cv))
lamL1.pick=cv.list$l.index[1,pick]  ##find the optimal (LamL1,LamL2) based on the cv score
lamL2.pick=cv.list$l.index[2,pick]
rm(cv.list)
return(list(lamL1.pick, lamL2.pick))
}
list_10_2lambda = mclapply(test_list, remMapCV, mc.cores = 12)
lamL1.pick= list_10_2lambda[[1]][[1]]
list_10_2lambda[[1]][[1]]
lamL2.pick= list_10_2lambda[[i]][[2]]
lamL2.pick= list_10_2lambda[[1]][[2]]
result_1 = remMap(X.trainData, Y.trainData,lamL1=lamL1.pick, lamL2=lamL2.pick, phi0=NULL, C.m=NULL)
testIndexes <- test_list[[i]]
X.testData <- X.m1[testIndexes, ]
Y.testData <- Y.m1[testIndexes, ]
X.trainData <- X.m1[-testIndexes, ]
Y.trainData <- Y.m1[-testIndexes, ]
for (l in 1:nloop){
test_list[[l]] = sample(nrow(X.m1), floor(nrow(X.m1)*0.3))
}
testIndexes <- test_list[[1]]
X.testData <- X.m1[testIndexes, ]
Y.testData <- Y.m1[testIndexes, ]
X.trainData <- X.m1[-testIndexes, ]
Y.trainData <- Y.m1[-testIndexes, ]
result_1 = remMap(X.trainData, Y.trainData,lamL1=lamL1.pick, lamL2=lamL2.pick, phi0=NULL, C.m=NULL)
log(3)
log(40)
log(2)
lamL2.v = seq(0,40, length=40)
lamL2.v = seq(0,40, length=41)
cv.glmnet
library(glmnet)
?cv.glmnet
install.packages("devtools")
library(devtools)
install_github("hong-revo/glmnetUtils")
library(glmnetUtils)
?cva.glmnet
x = list(x = list(1,2), y = list(2,3))
x = list(a = list(1,2), y = list(2,3))
x[[a]]
x[['a']]
?glmnet
library(glmnet)
?glment
?glmnet
?cv.glmnet
alpha = c(0,  .1,  .2, .4, .6, .8, 1)
lambda = seq(.01, 1, length = 20))
lambda1 = lambda*alpha
lambda = seq(.01, 1, length = 20)
lambda1 = lambda*alpha
lambda1
?combin
?combn
alpha = c(0,  .1,  .2, .4, .6, .8, 1)
lambda = seq(.01, 1, length = 20)
lambda1 = lambda*alpha
lambda1 = lambda*alpha[1]
for (i in 1:7){
temp<- alpha[i]*lambda
lambda1 = c(lambda1,temp)
}
lambda1
lambda
lambda1 = lambda*alpha[1]
for (i in 2:7){
temp<- alpha[i]*lambda
lambda1 = c(lambda1,temp)
}
lambda1
lambda2 = lambda*(1-alpha[1])
for (i in 2:7){
temp<- (1-alpha[i])*lambda
lambda2 = c(lambda2,temp)
}
lambda2
exp(seq(log(0.1),log(40), length=40))
load(file = '/Users/changche/My/Study/Work/clinical533_02_17_2018.RData')  ## load clinical data
load(file="/Users/changche/My/Study/Work/ExonCountsNormalize533.RData")   ## load normalized exoncounts
load(file = '/Users/changche/My/Study/Work/exon330_genefilter.RData')
load(file ='/Users/changche/My/Study/Work/train_test_ID_12_14_2017.RData')
####################################################################################
####################################################################################
# trying remMap on "PCL", "PHQ9", "LRS_total"
listofn = c("PCL", "PHQ9", "LRS_total")
exon.norm.log = log2(exoncounts_normalized+1)  ## log transform normalized exoncounts
exon.norm.log = exon.norm.log[keep,]
exon.norm.log = t(exon.norm.log)
# delete the missing value and standardize both the response and predictor.
ind1 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(clinical$PCL) & !is.na(clinical$PHQ9) & !is.na(clinical$LRS_total))
ind2 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(apply(clinical[,listofn], 1, sum)))
exon.norm.log_1st = exon.norm.log[ind,]
X.m1 = scale(exon.norm.log_1st)
Y.m1 = cbind(clinical$PCL, clinical$PHQ9, clinical$LRS_total)
colnames(Y.m1) = listofn
Y.m1 = Y.m1[ind,]
Y.m1 = scale(Y.m1)
identical(ind1, ind2)
ind2 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(apply(clinical[listofn], 1, sum)))
# delete the missing value and standardize both the response and predictor.
ind1 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(clinical$PCL) & !is.na(clinical$PHQ9) & !is.na(clinical$LRS_total))
identical(ind1, ind2)
ind1 == ind2
?identical
ind1
ind2
ind2 = sort(which(clinical$batch==3 & clinical$Gender==0 & !is.na(apply(clinical[listofn], 1, sum))))
identical(ind1, ind2)
options
options()
options(digits = 5)
pi
e
log(1)
log(12)
options(digits = 4)
log(123132)
NULL <- options()
getOption('width')
# delete the missing value and standardize both the response and predictor.
ind1 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(clinical$PCL) & !is.na(clinical$PHQ9) & !is.na(clinical$LRS_total))
ind2 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(apply(clinical[listofn], 1, sum)))
length(ind1)
length(ind2)
identical(sort(ind1), sort(ind2))
class(ind1)
class(ind2)
ind2[!(ind2 %in% ind1)]
ind1[!(ind1 %in% ind2)]
names(ind1)
names(ind2)
names(ind2) = NULL
identical(sort(ind1), sort(ind2))
# delete the missing value and standardize both the response and predictor.
ind1 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(clinical$PCL) & !is.na(clinical$PHQ9) & !is.na(clinical$LRS_total))
ind2 = which(clinical$batch==3 & clinical$Gender==0 & !is.na(apply(clinical[listofn], 1, sum)))
exon.norm.log_1st = exon.norm.log[ind1,]
exon.norm.log_2 = exon.norm.log[ind2,]
identical(exon.norm.log_1st, exon.norm.log_2)
Y.m2 = clinical[listofn]
identical
identical(Y.m1, Y.m2)
Y.m2 = clinical[[listofn]]
Y.m2 = clinical[,listofn]
identical(Y.m1, Y.m2)
Y.m2 = as.matrix(Y.m2)
identical(Y.m1, Y.m2)
Y.m1 = cbind(clinical$PCL, clinical$PHQ9, clinical$LRS_total)
identical(Y.m1, Y.m2)
View(Y.m1)
View(Y.m2)
View(Y.m2)
Y.m1 = cbind(clinical$PCL, clinical$PHQ9, clinical$LRS_total)
colnames(Y.m1) = listofn
identical(Y.m1, Y.m2)
View(Y.m1)
View(Y.m2)
rownames(Y.m2) = 1:length(rownames(Y.m2))
identical(Y.m1, Y.m2)
View(Y.m2)
View(Y.m1)
table
table(Y.m1 = Y.,2)
table(Y.m1 = Y.m2)
table(Y.m1 == Y.m2)
table(is.na(Y.m1))
x = 'exp(seq(log(0.1),log(40), length=40))'
get(x)
eval(x)
?eval
eval(parse(x))
eval(parse(text = x))
?parse
hist(rpois(100))
hist(rpois(100, lambda = 10))
hist(rpois(100, lambda = 100))
hist(rpois(1000, lambda = 100))
hist(rpois(5000, lambda = 100))
hist(log(rpois(5000, lambda = 10)))
hist(log(rpois(5000, lambda = 100)))
rm(list = ls())
?ggpubr
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
?ggpubr
load(file = '/Users/changche/My/Study/Work/clinical533_02_17_2018.RData')  ## load clinical data
load(file="/Users/changche/My/Study/Work/ExonCountsNormalize533.RData")   ## load normalized exoncounts
load(file = '/Users/changche/My/Study/Work/exon330_genefilter.RData')
load(file ='/Users/changche/My/Study/Work/train_test_ID_12_14_2017.RData')
rm(c('exoncounts_normalized','clinical'))
rm(list = c('exoncounts_normalized','clinical'))
?cv.glmnet
library(glmnet)
?cv.glmnet
library(parallel)
detectCores(logical = FALSE)
library(parallel)
?parallel
install.packages('edgeR')
source("https://bioconductor.org/biocLite.R")
biocLite("edgeR")
library(edgeR)
?rpkm
d1 <- read.table('/Users/changche/My/Study/Work/Expression_normalized_ridge.txt', header = T)
dim(d1)
rm(list =)
rm(list = ls())
source('~/My/Study/Work/April_5th_MDD.R', echo=TRUE)
library(edgeR)
?rpkm
