
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ##  check outliers using top deviance genes and 203 new samples 
> 
> library(ggplot2)
> library(grid)
> library(gridExtra)
> 
> dataPathRNASeq <- '/export/home/pfkuan/WTCproject/Epigenetics/Data/RNASeq/ProcessedData_533Samples/'
> load(file=paste(dataPathRNASeq,'FPKM533.RData',sep=''))
> load(file = '/export/home/xurren/WTCProject/Data/ExonCountsNormalize533.RData')  ## load normalized exon counts
> # load(file = '/export/home/xurren/WTCProject/Data/GeneCountsNormalize533.RData')
> ##  dim(genecounts_normalized)
> ##  dim(fpkm)
> 
> genecounts_normalized = exoncounts_normalized
> 
> ##  get only new samples
> genecounts_normalized_new = genecounts_normalized[, 331:533]
> # nonZeroRows = ( apply(genecounts_normalized_new, 1, sum)!=0 )
> # genecounts_normalized_new = genecounts_normalized_new [nonZeroRows, ]
> # dim(genecounts_normalized_new)
> 
> ##  select top deviance genes
> medianAbsoluteDeviation = apply(genecounts_normalized_new, 1, mad)
> ##  length(medianAbsoluteDeviation)
> ##  order the medianAbsoluteDeviation
> order_ind = order(medianAbsoluteDeviation, decreasing = TRUE)
> ##  select 200 top deviance genes
> Num = 200
> topDevianceGene = genecounts_normalized_new[order_ind, ]
> topDevianceGene = topDevianceGene[1:Num, ]
> 
> prinCompAnalysis = prcomp(t(topDevianceGene), retx = TRUE, center = TRUE, scale = TRUE)
> pcVariance = prinCompAnalysis$sdev^2
> pcProportion = pcVariance/sum(pcVariance)
> cumsum(pcProportion)
  [1] 0.3618256 0.5839168 0.7144054 0.7471892 0.7736388 0.7936232 0.8122839
  [8] 0.8298897 0.8450192 0.8578549 0.8673420 0.8762177 0.8840105 0.8911277
 [15] 0.8977437 0.9035494 0.9086660 0.9134122 0.9176540 0.9213587 0.9247191
 [22] 0.9279154 0.9309078 0.9338570 0.9366925 0.9394630 0.9419325 0.9441889
 [29] 0.9464078 0.9485429 0.9505433 0.9523858 0.9541867 0.9559363 0.9575722
 [36] 0.9591629 0.9606719 0.9620917 0.9634884 0.9648229 0.9660774 0.9673248
 [43] 0.9685058 0.9696697 0.9707402 0.9717640 0.9727452 0.9736876 0.9746002
 [50] 0.9754688 0.9763089 0.9770894 0.9778516 0.9785738 0.9792727 0.9799658
 [57] 0.9806382 0.9812921 0.9819077 0.9825128 0.9831042 0.9836750 0.9842359
 [64] 0.9847779 0.9852900 0.9857809 0.9862485 0.9867143 0.9871390 0.9875611
 [71] 0.9879695 0.9883567 0.9887407 0.9891163 0.9894829 0.9898354 0.9901814
 [78] 0.9905172 0.9908450 0.9911589 0.9914679 0.9917645 0.9920489 0.9923225
 [85] 0.9925801 0.9928315 0.9930804 0.9933171 0.9935483 0.9937723 0.9939935
 [92] 0.9942088 0.9944200 0.9946254 0.9948227 0.9950123 0.9951922 0.9953708
 [99] 0.9955472 0.9957205 0.9958870 0.9960480 0.9962004 0.9963430 0.9964776
[106] 0.9966101 0.9967377 0.9968593 0.9969767 0.9970931 0.9972063 0.9973189
[113] 0.9974252 0.9975263 0.9976267 0.9977238 0.9978180 0.9979083 0.9979956
[120] 0.9980786 0.9981586 0.9982362 0.9983097 0.9983824 0.9984523 0.9985219
[127] 0.9985910 0.9986569 0.9987195 0.9987793 0.9988375 0.9988952 0.9989511
[134] 0.9990034 0.9990550 0.9991034 0.9991468 0.9991889 0.9992293 0.9992688
[141] 0.9993074 0.9993444 0.9993805 0.9994156 0.9994485 0.9994799 0.9995106
[148] 0.9995409 0.9995703 0.9995958 0.9996202 0.9996439 0.9996667 0.9996882
[155] 0.9997092 0.9997291 0.9997484 0.9997671 0.9997850 0.9998010 0.9998158
[162] 0.9998299 0.9998428 0.9998552 0.9998675 0.9998791 0.9998895 0.9998992
[169] 0.9999086 0.9999172 0.9999253 0.9999331 0.9999398 0.9999462 0.9999523
[176] 0.9999582 0.9999631 0.9999680 0.9999717 0.9999752 0.9999785 0.9999816
[183] 0.9999847 0.9999872 0.9999896 0.9999915 0.9999933 0.9999947 0.9999960
[190] 0.9999970 0.9999979 0.9999985 0.9999990 0.9999994 0.9999997 0.9999999
[197] 0.9999999 1.0000000 1.0000000 1.0000000
> pc1 = prinCompAnalysis$x[, 1]
> pc2 = prinCompAnalysis$x[, 2]
> pc3 = prinCompAnalysis$x[, 3]
> 
> df1 = data.frame(PC1=pc1, PC2=pc2)
> df2 = data.frame(PC1=pc1, PC3=pc3)
> df3 = data.frame(PC2=pc2, PC3=pc3)
> 
> ###################################################################
> ##  PCA on FPKM using top deviance genes and 203 new samples 
> FPKM_new = fpkm[, 331:533]
> # nonZeroRows_FPKM = ( apply(FPKM_new, 1, sum)!=0 )
> # FPKM_new = FPKM_new [nonZeroRows_FPKM, ]
> # dim(FPKM_new)
> 
> mad_FPKM = apply(FPKM_new, 1, mad)
> order_ind_FPKM = order(mad_FPKM, decreasing = TRUE)
> ##  select 200 top deviance genes
> Num = 200
> topDevianceGene_FPKM = FPKM_new[order_ind_FPKM, ]
> topDevianceGene_FPKM = topDevianceGene_FPKM[1:Num, ]
> 
> pcAnalysis_FPKM = prcomp(t(topDevianceGene_FPKM), retx = TRUE, center = TRUE, scale = TRUE)
> pcVariance_FPKM = pcAnalysis_FPKM$sdev^2
> pcProportion_FPKM = pcVariance_FPKM/sum(pcVariance_FPKM)
> cumsum(pcProportion_FPKM)
  [1] 0.3611332 0.5536007 0.6938822 0.7333837 0.7632052 0.7919228 0.8114740
  [8] 0.8272876 0.8384958 0.8490247 0.8587687 0.8677972 0.8751978 0.8820920
 [15] 0.8887611 0.8944805 0.8995641 0.9041981 0.9083986 0.9124748 0.9164015
 [22] 0.9201952 0.9236745 0.9270764 0.9302281 0.9331411 0.9359315 0.9385456
 [29] 0.9410598 0.9435333 0.9458281 0.9480053 0.9500859 0.9519683 0.9537358
 [36] 0.9554391 0.9570714 0.9586775 0.9602301 0.9617182 0.9631114 0.9644541
 [43] 0.9657568 0.9669638 0.9681374 0.9692716 0.9703003 0.9713068 0.9722923
 [50] 0.9732512 0.9741862 0.9750760 0.9759069 0.9767024 0.9774913 0.9782318
 [57] 0.9789521 0.9796416 0.9803134 0.9809754 0.9816154 0.9822247 0.9828225
 [64] 0.9833930 0.9839391 0.9844674 0.9849834 0.9854889 0.9859821 0.9864475
 [71] 0.9869002 0.9873373 0.9877650 0.9881770 0.9885831 0.9889706 0.9893512
 [78] 0.9897107 0.9900599 0.9903953 0.9907241 0.9910404 0.9913441 0.9916432
 [85] 0.9919349 0.9922198 0.9924927 0.9927594 0.9930190 0.9932680 0.9935102
 [92] 0.9937444 0.9939638 0.9941816 0.9943977 0.9945983 0.9947926 0.9949811
 [99] 0.9951671 0.9953438 0.9955149 0.9956797 0.9958421 0.9960029 0.9961613
[106] 0.9963067 0.9964500 0.9965879 0.9967221 0.9968559 0.9969863 0.9971058
[113] 0.9972206 0.9973329 0.9974413 0.9975465 0.9976496 0.9977473 0.9978411
[120] 0.9979316 0.9980211 0.9981062 0.9981869 0.9982654 0.9983427 0.9984166
[127] 0.9984896 0.9985602 0.9986288 0.9986934 0.9987566 0.9988182 0.9988769
[134] 0.9989341 0.9989893 0.9990419 0.9990919 0.9991388 0.9991848 0.9992287
[141] 0.9992703 0.9993104 0.9993493 0.9993873 0.9994238 0.9994592 0.9994902
[148] 0.9995200 0.9995494 0.9995780 0.9996058 0.9996317 0.9996570 0.9996801
[155] 0.9997031 0.9997249 0.9997446 0.9997630 0.9997804 0.9997972 0.9998125
[162] 0.9998267 0.9998402 0.9998536 0.9998666 0.9998781 0.9998890 0.9998988
[169] 0.9999078 0.9999165 0.9999249 0.9999326 0.9999394 0.9999456 0.9999517
[176] 0.9999571 0.9999625 0.9999674 0.9999720 0.9999762 0.9999798 0.9999831
[183] 0.9999855 0.9999875 0.9999895 0.9999913 0.9999928 0.9999941 0.9999953
[190] 0.9999963 0.9999971 0.9999979 0.9999985 0.9999991 0.9999994 0.9999996
[197] 0.9999998 0.9999999 1.0000000 1.0000000
> pc1_FPKM = pcAnalysis_FPKM$x[, 1]
> pc2_FPKM = pcAnalysis_FPKM$x[, 2]
> pc3_FPKM = pcAnalysis_FPKM$x[, 3]
> 
> df1_FPKM = data.frame(PC1=pc1_FPKM, PC2=pc2_FPKM)
> df2_FPKM = data.frame(PC1=pc1_FPKM, PC3=pc3_FPKM)
> df3_FPKM = data.frame(PC2=pc2_FPKM, PC3=pc3_FPKM)
> 
> ##  PC plots to check outliers
> resultsPath = '/export/home/xurren/WTCProject/Results/'
> pdf(file = paste(resultsPath, "PC_plots_new_samples_only_top_genes.pdf", sep = ''), width=10, height=10)
> p1_label = ggplot(df1, aes(x=PC1, y=PC2, label = colnames(genecounts_normalized_new))) + geom_point() + geom_text(size = 2, aes(label = colnames(genecounts_normalized_new)), hjust = 0.5, vjust = -0.5)
> p2_label = ggplot(df2, aes(x=PC1, y=PC3, label = colnames(genecounts_normalized_new))) + geom_point() + geom_text(size = 2, aes(label = colnames(genecounts_normalized_new)), hjust = 0.5, vjust = -0.5)
> p3_label = ggplot(df3, aes(x=PC2, y=PC3, label = colnames(genecounts_normalized_new))) + geom_point() + geom_text(size = 2, aes(label = colnames(genecounts_normalized_new)), hjust = 0.5, vjust = -0.5)
> # grid.arrange(p1_label, p2_label, p3_label, ncol=2, top = "PC plots for normalized counts with 203 new samples only")
> grid.arrange(p1_label, p2_label, p3_label, ncol=2, top = "PC plots for normalized exon counts with 203 new samples only")
> 
> p1_FPKM = ggplot(df1_FPKM, aes(x=PC1, y=PC2, label = colnames(FPKM_new))) + geom_point() + geom_text(size = 2, aes(label = colnames(FPKM_new)), hjust = 0.5, vjust = -0.5)
> p2_FPKM = ggplot(df2_FPKM, aes(x=PC1, y=PC3, label = colnames(FPKM_new))) + geom_point() + geom_text(size = 2, aes(label = colnames(FPKM_new)), hjust = 0.5, vjust = -0.5)
> p3_FPKM = ggplot(df3_FPKM, aes(x=PC2, y=PC3, label = colnames(FPKM_new))) + geom_point() + geom_text(size = 2, aes(label = colnames(FPKM_new)), hjust = 0.5, vjust = -0.5)
> grid.arrange(p1_FPKM, p2_FPKM, p3_FPKM, ncol=2, top = "PC plots for FPKM with 203 new samples only")
> dev.off()
null device 
          1 
> 
> 
> proc.time()
   user  system elapsed 
  6.592   0.112   6.684 
